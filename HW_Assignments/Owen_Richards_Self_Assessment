# Self Assessment - Owen Richards

Our group created a simulation-like game teaching the user how to maintain and balance an ecosystem. When the user first starts, they are given an unbalanced ecosystem with three herbivore animals. If the user was to leave this system as is, each animal would eventually reproduce and eat all of the available grass and die out of starvation. The user is given the ability to place all of our available animals, including carnivores. The user can place a carnivore to control the population of other species. The user also has the ability to place buildings for additional resources along with fences to separate or contain the different species. The main contribution I made to this project was the entire user interface and designing the models for the environment and structures.

I created the user interface for the main menu, in-game overlay, and escape menu. This includes the design and programming behind every 2D image and button the user interacts with. This involved designing and structuring buttons in Photoshop, designing the UI and elements in Photoshop, programming each button throughout each menu, and connecting each variable seen on the game's UI, including building and releasing prices, each animal count, plant count, funds, and release count. The only aspect I didn’t design was the money multiplier. I also created every structure in the building menu, except for the outhouse, along with the environment as a whole. This includes a log house, watchtower, restroom, fence, research station and bench, trees, and the landscape you play in. The only part of the environment I didn’t design was the trees that dropped acorns for the squirrels. I did contribute to other factors; as an example, the guest system, my code was altered by another member to use their model, so I’m giving them credit for that. These tasks required me to learn about Godot (the game engine) and Blender (3D object creation software). I had no prior experience with either software. To learn about both, I spent some time creating random models in Blender to get used to the system, and I created a small Mario Party-like game in Godot. I researched some material online, both reading articles and watching videos, and applied it to a separate project to become more comfortable using both systems. In the end I believe that we did a fantastic job with the low-poly design we went for; we received a lot of praise for the stylistic look of the game during the expo.

In the past couple of months, our group was able to take our idea on paper and turn it into a demo version of the game for the expo. We’ve had to work in groups many times throughout the last couple of years, but this time around, working on a large project like this required us to meet regularly and check in on progress. Having weekly meetings to discuss implemented updates helped push our progress forward, and we were able to get a lot more done. I don’t believe that I can say any part of our teamwork aspect was unsuccessful, in my opinion. We all pushed each other to make progress, and we worked separately but collaboratively. As an example, if I heard Kyle say he was working on building placement, I immediately got to work on the UI for him to use during the implementation process.

I believe each member of our team did a rather equal amount of work, with the potential outlying factor being Kyle and/or Ryan doing slightly additional work. Kyle was the only person with prior experience in Godot and was able to get a lot of difficult features implemented quickly. Ryan was working on the animal models, which took a lot of time structuring and animating. Saying that, Nate and I both had our fair share of work implementing our own systems throughout the project that equalized the work rather well. We all contributed to the project in our own ways, working separately on related tasks that were later combined into the demo we had for the expo.
